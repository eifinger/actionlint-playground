on:
  pull_request:
    types: [closed]
  workflow_dispatch:
      
jobs:
  determine-release-version:
    name: "Determine release version"
    if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      releaseVersion: ${{ steps.determineReleaseVersion.outputs.releaseVersion }}
      lastReleaseTag: ${{ steps.determineReleaseVersion.outputs.lastReleaseTag }}
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          fetch-depth: 0

      - name: Determine Release Version
        id: determineReleaseVersion
        run: |
          set -x
          lastReleaseVersion=$(git tag | grep 'release/v' | sed 's/release\/v//' | sort -nr | head -1)
          (( newReleaseVersion = lastReleaseVersion + 1 ))
          echo "lastReleaseTag=release/v$lastReleaseVersion" >> "$GITHUB_OUTPUT"
          echo "releaseVersion=v$newReleaseVersion" >> "$GITHUB_OUTPUT"


  publish-release:
    name: "Publish successful release"
    if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    needs: [determine-release-version]
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          fetch-depth: 0
      - name: Create GitHub Release
        env:
          RELEASE_VERSION: ${{ needs.determine-release-version.outputs.releaseVersion }}
          LAST_RELEASE_TAG: ${{ needs.determine-release-version.outputs.lastReleaseTag }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Write PR title as body header, fallback to last commit message if not triggered by PR
          if [ -n "${{ github.event.pull_request.title }}" ]; then
            echo "# ${{ github.event.pull_request.title }}"
            echo "# ${{ github.event.pull_request.title }}" >> releaseBody.txt
          else
            echo "# $(git log -1 --pretty=format:'%s')"
            echo # $(git log -1 --pretty=format:'%s') >> releaseBody.txt
          fi
          # Append commit messages since last release
          echo $(git log --pretty=format:'- %s' "${LAST_RELEASE_TAG}..HEAD") >> releaseBody.txt
          gh release create "release/${RELEASE_VERSION}" \
            --title "${RELEASE_VERSION}" \
            --notes-file "releaseBody.txt"
