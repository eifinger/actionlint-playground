on:
  pull_request:
    types: [closed]
      

jobs:
  determine-release-version:
    name: "Determine release version"
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    outputs:
      releaseVersion: ${{ steps.determineReleaseVersion.outputs.releaseVersion }}
      lastReleaseTag: ${{ steps.determineReleaseVersion.outputs.lastReleaseTag }}
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          fetch-depth: 0

      - name: Determine Release Version
        id: determineReleaseVersion
        run: |
          set -x
          lastReleaseVersion=$(git tag | grep 'release/v' | sed 's/release\/v//' | sort -nr | head -1)
          (( newReleaseVersion = lastReleaseVersion + 1 ))
          echo "lastReleaseTag=release/v$lastReleaseVersion" >> "$GITHUB_OUTPUT"
          echo "releaseVersion=v$newReleaseVersion" >> "$GITHUB_OUTPUT"

  publish-release:
    name: "Publish successful release"
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    needs: [determine-release-version]
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          fetch-depth: 0
      - name: Create GitHub Release
        env:
          RELEASE_VERSION: ${{ needs.determine-release-version.outputs.releaseVersion }}
          LAST_RELEASE_TAG: ${{ needs.determine-release-version.outputs.lastReleaseTag }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "release/${RELEASE_VERSION}" -t "${RELEASE_VERSION}" -n "${{ github.event.pull_request.title }}"
